<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Edward Chavis Blog</title>
    <link>/post/</link>
    <description>Recent content in Posts on Edward Chavis Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Sep 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Creating a New Theme</title>
      <link>/post/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>Filtering Rows/Columns Using SQL</title>
      <link>/post/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/migrate-from-jekyll/</guid>
      <description>Set Up library(Lahman) library(sqldf)  ##A General Lay Out
Suppose we want to see the homerun totals for the 1927 Yankees. We could write the following:
query&amp;lt;-&amp;quot;SELECT playerID,yearID,teamID,HR FROM Batting WHERE teamID=&#39;NYA&#39; and yearID=1927&amp;quot; sqldf(query)  ##Setting Limits and Data Layout
Suppose you want to find all instances where Yankees have hit 40 homeruns or more.
query&amp;lt;-&amp;quot;SELECT playerID,yearID,teamID,HR FROM Batting WHERE HR&amp;gt;39&amp;quot; sqldf(query)  ##Setting Right and Left Limits To Data Set</description>
    </item>
    
    <item>
      <title>SQL Fun</title>
      <link>/post/sql-fun/</link>
      <pubDate>Mon, 09 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/sql-fun/</guid>
      <description>library(Lahman)library(sqldf)library(ggplot2)The Data——————————————————-query&amp;lt;-&amp;quot;SELECT playerID, salary FROM Salaries&amp;quot;result&amp;lt;-sqldf(query)Visualizing The Data——————————————–ggplot()+geom_histogram(data=result,aes(x=salary))## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.The Data——————————————————–query&amp;lt;-&amp;quot;SELECT yearID, avg(salary) AS avg_salaryFROM SalariesGROUP BY yearID&amp;quot;result&amp;lt;-sqldf(query)Visualizing the Data——————————————–ggplot()+geom_line(data=result,aes(x=yearID, y=avg_salary))</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/post/goisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/goisforlovers/</guid>
      <description>&lt;p&gt;Hugo uses the excellent &lt;a href=&#34;http://golang.org/&amp;gt;&#34;&gt;go&lt;/a&gt; &lt;a href=&#34;http://golang.org/pkg/html/template/&amp;gt;&#34;&gt;html/template&lt;/a&gt; library for
its template engine. It is an extremely lightweight engine that provides a very
small amount of logic. In our experience that it is just the right amount of
logic to be able to create a good static website. If you have used other
template systems from different languages or frameworks you will find a lot of
similarities in go templates.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/post/hugoisforlovers/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/post/hugoisforlovers/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/2015-07-23-r-rmarkdown/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-07-23-r-rmarkdown/</guid>
      <description>bu— title: “Hello R Markdown” author: “Frida Gomam” date: 2015-07-23T21:13:14-05:00 categories: [“R”] tags: [“R Markdown”, “plot”, “regression”] —
R MarkdownThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars)## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.</description>
    </item>
    
    <item>
      <title></title>
      <link>/post/filtering-using-sql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/post/filtering-using-sql/</guid>
      <description>Filtering Rows/Columns Using SQLcode{white-space: pre;}pre:not([class]) {background-color: white;}if (window.hljs &amp;&amp; document.readyState &amp;&amp; document.readyState === &#34;complete&#34;) {window.setTimeout(function() {hljs.initHighlighting();}, 0);}h1 {font-size: 34px;}h1.title {font-size: 38px;}h2 {font-size: 30px;}h3 {font-size: 24px;}h4 {font-size: 18px;}h5 {font-size: 16px;}h6 {font-size: 12px;}.</description>
    </item>
    
  </channel>
</rss>